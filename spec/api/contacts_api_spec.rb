=begin
#SendinBlue API

#SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

OpenAPI spec version: 3.0.0
Contact: contact@sendinblue.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SendinblueApiv3::ContactsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ContactsApi' do
  before do
    # run before each test
    @instance = SendinblueApiv3::ContactsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContactsApi' do
    it 'should create an instance of ContactsApi' do
      expect(@instance).to be_instance_of(SendinblueApiv3::ContactsApi)
    end
  end

  # unit tests for add_contact_to_list
  # Add existing contacts to a list
  # 
  # @param list_id Id of the list
  # @param contact_emails Emails addresses of the contacts
  # @param [Hash] opts the optional parameters
  # @return [PostContactInfo]
  describe 'add_contact_to_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_attribute
  # Creates contact attributes
  # 
  # @param create_attribute Values to create an attribute
  # @param [Hash] opts the optional parameters
  # @return [CreateModel]
  describe 'create_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact
  # Create a contact
  # 
  # @param create_contact Values to create a contact
  # @param [Hash] opts the optional parameters
  # @return [CreateModel]
  describe 'create_contact test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_folder
  # Create a folder
  # 
  # @param name Name of the folder
  # @param [Hash] opts the optional parameters
  # @return [CreateModel]
  describe 'create_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_list
  # Create a list
  # 
  # @param create_list Values to create a list
  # @param [Hash] opts the optional parameters
  # @return [CreateModel]
  describe 'create_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_attribute
  # Deletes an attribute
  # 
  # @param attribute_id id of the attribute
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_folder
  # Delete a folder (and all its lists)
  # 
  # @param folder_id Id of the folder
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list
  # Delete a list
  # 
  # @param list_id Id of the list
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attributes
  # Lists all attributes
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetAttributes]
  describe 'get_attributes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_info
  # Retrieves contact informations
  # 
  # @param email Email (urlencoded) of the contact
  # @param [Hash] opts the optional parameters
  # @return [GetExtendedContactDetails]
  describe 'get_contact_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_stats
  # Get the campaigns statistics for a contact
  # 
  # @param email Email address (urlencoded) of the contact
  # @param [Hash] opts the optional parameters
  # @return [GetContactCampaignStats]
  describe 'get_contact_stats test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts
  # Get all the contacts
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of documents per page
  # @option opts [Integer] :offset Index of the first document of the page
  # @return [GetContacts]
  describe 'get_contacts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts_from_list
  # Get the contacts in a list
  # 
  # @param list_id Id of the list
  # @param [Hash] opts the optional parameters
  # @option opts [String] :modified_since Filter the contacts modified after a given date (YYYY-MM-DD HH:mm:ss)
  # @option opts [Integer] :limit Number of documents per page
  # @option opts [Integer] :offset Index of the first document of the page
  # @return [GetContacts]
  describe 'get_contacts_from_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_folder
  # Returns folder details
  # 
  # @param folder_id id of the folder
  # @param [Hash] opts the optional parameters
  # @return [GetFolder]
  describe 'get_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_folder_lists
  # Get the lists in a folder
  # 
  # @param folder_id Id of the folder
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of documents per page
  # @option opts [Integer] :offset Index of the first document of the page
  # @return [GetFolderLists]
  describe 'get_folder_lists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_folders
  # Get all the folders
  # 
  # @param limit Number of documents per page
  # @param offset Index of the first document of the page
  # @param [Hash] opts the optional parameters
  # @return [GetFolders]
  describe 'get_folders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list
  # Get the details of a list
  # 
  # @param list_id Id of the list
  # @param [Hash] opts the optional parameters
  # @return [GetExtendedList]
  describe 'get_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_lists
  # Get all the lists
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of documents per page
  # @option opts [Integer] :offset Index of the first document of the page
  # @return [GetLists]
  describe 'get_lists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_contacts
  # Import contacts
  # It returns the background process ID which on completion calls the notify URL that you have set in the input.
  # @param request_contact_import Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;
  # @param [Hash] opts the optional parameters
  # @return [CreatedProcessId]
  describe 'import_contacts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_contact_to_list
  # Remove existing contacts from a list
  # 
  # @param list_id Id of the list
  # @param contact_emails Emails adresses of the contact
  # @param [Hash] opts the optional parameters
  # @return [PostContactInfo]
  describe 'remove_contact_to_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_contact_export
  # Export contacts
  # It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
  # @param request_contact_export Values to request a contact export
  # @param [Hash] opts the optional parameters
  # @return [CreatedProcessId]
  describe 'request_contact_export test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact
  # Updates a contact
  # 
  # @param email Email (urlencoded) of the contact
  # @param update_contact Values to update a contact
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_contact test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_folder
  # Update a contact folder
  # 
  # @param folder_id Id of the folder
  # @param name Name of the folder
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_list
  # Update a list
  # 
  # @param list_id Id of the list
  # @param update_list Values to update a list
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
